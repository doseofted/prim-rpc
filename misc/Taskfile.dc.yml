# yaml-language-server: https://json.schemastore.org/taskfile.json
version: "3"

tasks:

  ps:
    desc: "List all running service names"
    cmds:
      - "docker compose ps --services"

  logs:
    desc: "Show and follow recent logs for running services"
    cmds:
      - cmd: "docker compose logs -f --tail=15"
        ignore_error: true

  pull:
    desc: "Pull newer versions of services if available, excluding local images"
    env:
      COMPOSE_FILE: "{{.COMPOSE_FILE_DEV}}"
    cmds:
      # NOTE ignore pull failures since local containers may not be pushed to registry yet
      - "docker compose pull --ignore-pull-failures"

  # Build services in order of images' dependencies, with build cache
  build:
    env:
      COMPOSE_FILE: "{{.COMPOSE_FILE_DEV}}"
    deps:
      - pull
    cmds:
      # First build libraries image since possibly needed in frontend and backend
      - "docker compose build libraries"
      # Now build everything else (libraries is now tagged and cached)
      - "docker compose build"

  # Build services in development but without a build cache. Useful when a major change is made to project.
  build-clean:
    env:
      COMPOSE_FILE: "{{.COMPOSE_FILE_DEV}}"
    deps:
      - pull
    cmds:
      # First build libraries image since possibly needed in frontend and backend
      - "docker compose build libraries --no-cache"
      # Now build everything else (libraries is now tagged and cached)
      - "docker compose build --no-cache"

  # Build services in production with overridden build arguments and using the server's target platform.
  build-prod:
    env:
      DOCKER_DEFAULT_PLATFORM: "linux/amd64"
      COMPOSE_FILE: "{{.COMPOSE_FILE_DEV}}"
      NODE_ENV: "production"
      HOST: "prim.plus"
    deps:
      - pull
    cmds:
      # First build libraries image since possibly needed in frontend and backend
      - "docker compose build libraries"
      # Now build everything else (libraries is now tagged and cached)
      - "docker compose build"
  
  push:
    desc: "Push the production-built services to the registry."
    deps:
      - build-production
    cmds:
      - docker compose push

  up-build:
    desc: "Build and start services in background"
    deps:
      - build
    cmds:
      # First, a trused certificate should be set up for use in container
      - task: :dev:cert
      # Now the services can be started in the background
      - "docker compose up -d"
      # For convenience, logs from running services will be shown. Ctrl-C does not shut down services.
      - task: logs

  up-only:
    desc: "Start services in background (pull prior to running, as needed)"
    cmds:
      # Now the services can be started in the background
      - "docker compose up -d"
      # For convenience, logs from running services will be shown. Ctrl-C does not shut down services.
      - task: logs

  down:
    desc: "Stop running services"
    cmds:
      - "docker compose down -v --remove-orphans -t 10"

  exe:
    desc: "Run shell in running service, like so: `task dc:exe -- backend`"
    interactive: true
    cmds:
      - "docker compose exec {{.CLI_ARGS}} bash"

  run:
    desc: "Run shell in one-off service, like so: `task dc:run -- backend`"
    interactive: true
    cmds:
      - "docker compose run {{.CLI_ARGS}} bash"
