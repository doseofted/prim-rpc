# yaml-language-server: https://json.schemastore.org/taskfile.json
version: "3"

tasks:

  ps:
    desc: "List all running service names"
    cmds:
      - "docker compose ps --services"

  logs:
    desc: "Show and follow recent logs for running services"
    cmds:
      - cmd: "docker compose logs -f --tail=15"
        ignore_error: true

  pull:
    desc: "Pull newer versions of services if available, excluding local images"
    env:
      COMPOSE_FILE: "{{.COMPOSE_FILE_PROD}}"
      COMPOSE_PROFILES: "monitoring"
    cmds:
      # NOTE ignore pull failures since local containers may not be pushed to registry yet
      - "docker compose pull --ignore-pull-failures"

  # Build services in order of images' dependencies, with build cache
  build:
    &build
    env:
      COMPOSE_FILE: "{{.COMPOSE_FILE_DEV}}"
      COMPOSE_PROFILES: "dev"
    deps:
      - pull
    cmds:
      # First build libraries image since possibly needed in frontend and backend
      - "docker compose build libraries"
      # Now build everything else (libraries is now tagged and cached)
      - "docker compose build"

  # Build services in development but without a build cache. Useful when a major change is made to project.
  build-clean:
    <<: *build
    cmds:
      - "docker compose build libraries --no-cache"
      - "docker compose build --no-cache"

  # Build services in production with overridden build arguments and using the server's target platform.
  build-production:
    <<: *build
    env:
      DOCKER_DEFAULT_PLATFORM: "linux/amd64"
      COMPOSE_FILE: "{{.COMPOSE_FILE_DEV}}"
      NODE_ENV: "production"
      HOST: "prim.plus"
  
  push:
    env:
      # do not include base "libraries" image here
      COMPOSE_PROFILES: ""
    desc: "Build and push, for production, the services to the registry."
    deps:
      - build-production
    cmds:
      - docker compose push

  dev:
    desc: "Setup development environment then build and start services in background"
    deps:
      # Images need to be built
      - build
    cmds:
      # Install dependencies and build projects once so editor can work with type definitions
      - task: :js:setup
      # A trusted certificate should be set up for use in container
      - task: :dev:cert
      # Now the services can be started in the background
      - "docker compose up -d"
      # For convenience, logs from running services will be shown. Ctrl-C does not shut down services.
      - task: logs

  up:
    desc: "Start services in background with given environment (run `task dc:pull` prior when needed)"
    cmds:
      # Now the services can be started in the background
      - "docker compose up -d"
      # For convenience, logs from running services will be shown. Ctrl-C does not shut down services.
      - task: logs

  down:
    desc: "Stop running services"
    cmds:
      - "docker compose down -v --remove-orphans -t 10"

  exe:
    desc: "Run shell in running service, like so: `task dc:exe -- backend`"
    interactive: true
    cmds:
      - "docker compose exec {{.CLI_ARGS}} bash"

  run:
    desc: "Run shell in one-off service, like so: `task dc:run -- backend`"
    interactive: true
    cmds:
      - "docker compose run {{.CLI_ARGS}} bash"
