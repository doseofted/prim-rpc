version: 3

tasks:

  # NOTE: `mkcert` must be installed on the host, since a containerized version would install CA in its own stores
  cert:
    desc: "Create a certificate to be used in development, trusted by the host system (requires `mkcert`)"
    status:
      - "test -f data/server/dev-cert.pem"
      - "test -f data/server/dev-key.pem"
    cmds:
      - "mkdir -p data/server"
      - |
        mkcert \
          -key-file "data/server/dev-key.pem" \
          -cert-file "data/server/dev-cert.pem" \
          {{.WEBSITE_HOST}} "*.{{.WEBSITE_HOST}}" localhost 127.0.0.1 ::1

  dns:
    desc: "Run a DNS server for development, useful for resolving '*.test' TLDs using devices on the same network"
    vars:
      DNS_BIND:
        sh: "pnpm --silent zx misc/dns-answer-address.mjs --begin=192"
      DNS_TLD: "test"
    cmds:
      - "docker pull coredns/coredns:1.8.4"
      - |
        docker run -it --rm --name coredns \
          -v "$(pwd)/misc/dev.Corefile:/root/Corefile" \
          -p "{{.DNS_BIND}}:53:53/tcp" -p "{{.DNS_BIND}}:53:53/udp" \
          -e "DNS_BIND={{.DNS_BIND}}" \
          -e "DNS_TLD={{.DNS_TLD}}" \
          coredns/coredns:1.8.4 \
          -conf /root/Corefile

  install:
    desc: "Set Node version and install node modules with PNPM"
    cmds:
      - "corepack enable"
      - "pnpm env use --global 18.7.0"
      - "pnpm install"

  setup:
    desc: "Set up project for development (rerun on major changes)"
    deps:
      - cert
      - install
    cmds:
      - pnpm build

  upgrade:
    desc: "Upgrade node modules to latest versions across project"
    ignore_error: true
    deps:
      - install
    cmds:
      # `pnpm upgrade` doesn't show which packages are affected so run `pnpm outdated` first
      - "pnpm outdated -r"
      # Upgrade all dependencies to latest
      - "pnpm upgrade -r --interactive --latest"
      - "echo 'In event of issues after upgrading, try `task dev:clean` then reinstall. If all else fails, delete lockfile.'"

  # NOTE: errors are ignored for "clean-*" commands below since data/* contents owned by root user cannot be deleted
  # (otherwise commands work fine)
  # Remove all node_modules (useful especially in container environments when only production dependencies are needed)
  clean-node-modules:
    cmds: ["find . -name node_modules -type d -prune -exec rm -fr {} +"]
    ignore_error: true
  # Remove all distributable files, useful before uploading a package to a registry
  clean-distributable:
    cmds: ["find . -name dist -type d -prune -exec rm -fr {} +"]
    ignore_error: true
  # clean all TurboRepo cache
  clean-turbo:
    cmds: ["find . -name .turbo -type d -prune -exec rm -fr {} +"]
    ignore_error: true

  clean:
    desc: "Remove locally built files from the project, useful for a clean run"
    cmds:
      # Remove all node_modules first
      - task: clean-node-modules
      # Now that node_modules are gone, delete dist folders (doing after deletion of node_modules so modules aren't included)
      - task: clean-distributable
      # Remove TurboRepo cache
      - task: clean-turbo
      # Remove Task cache
      - "rm -fr .task"
      # Remove Parcel cache
      - "rm -fr .parcel-cache"
      # Task doesn't run as root and it could be dangerous to remove project data, so this will be a manual step
      - "echo \"You'll need to remove data/* as root. The .env file in this project was kept.\""

  build-libs:
    cmds:
      - pnpm entrypoint
    env:
      NODE_ENV: "development"
  local-parallel:
    deps:
      - build-libs
      - :frontend:entrypoint
  local:
    desc: "Run a local development environment watching and running all parts of project without the use of containers"
    cmds:
      - task: install
      - pnpm build
      - task: local-parallel
