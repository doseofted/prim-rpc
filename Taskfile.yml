version: "3"

dotenv:
  - ".env"

vars:
  COMPOSE_CONFIG_BASE: "-f docker-compose.yml"
  # The following snippet is used to determine configuration for wanted environment:
  # If configuration order changes, snippet below should be updated to reflect it.
  COMPOSE_CONFIG_GIVEN: "{{coalesce .COMPOSE_PROD .COMPOSE_DEV}}"

includes:
  # "dc" as in "Docker Compose"
  dc: ./misc/Taskfile.dc.yml
  js: ./misc/Taskfile.js.yml

tasks:

  default:
    deps:
      - dc:up

  # NOTE: `mkcert` must be installed on the host, since a containerized version would install CA in its own stores
  dev:cert:
    desc: "Create a certifcate to be used in development, trusted by the host system (requires `mkcert`)"
    cmds:
      - "mkdir -p data/server"
      - |
        mkcert \
          -key-file "data/server/dev-key.pem" \
          -cert-file "data/server/dev-cert.pem" \
          {{.COMPOSE_HOST}} "*.{{.COMPOSE_HOST}}" localhost 127.0.0.1 ::1

  dev:dns:
    desc: "Run a DNS for development, useful for resolving '*.test' TLDs using devices on the same network"
    # NOTE: variables below is now set from .env file
    # vars:
    #   DNS_BIND:
    #     sh: "hostname -I | awk '{print $1}'"
    #   DNS_TLD: "test"
    cmds:
      - "docker pull coredns/coredns:1.8.4"
      - |
        docker run -it --rm --name coredns \
          -v "$(pwd)/misc/dev.Corefile:/root/Corefile" \
          -p "{{.DNS_BIND}}:53:53/tcp" -p "{{.DNS_BIND}}:53:53/udp" \
          -e "DNS_BIND={{.DNS_BIND}}" \
          -e "DNS_TLD={{.DNS_TLD}}" \
          coredns/coredns:1.8.4 \
          -conf /root/Corefile

  dev:clean:
    desc: "Remove locally built files from the project, useful for a clean run (note: data/* must be deleted separately by root)"
    cmds:
      # Remove Parcel cache
      - "rm -fr .parcel-cache"
      # and root node modules
      - "rm -fr node_modules"
      # Remove all node_modules in projects and libraries
      - "find ./project -name 'node_modules' -type d -prune -exec rm -rf '{}' \\;"
      - "find ./libraries -name 'node_modules' -type d -prune -exec rm -rf '{}' \\;"
      # Now that node_modules are gone, delete dist folders (doing after deletion of node_modules so modules aren't included)
      - "find ./project -name 'dist' -type d -prune -exec rm -rf '{}' \\;"
      - "find ./libraries -name 'dist' -type d -prune -exec rm -rf '{}' \\;"
      - "echo \"You'll need to remove data/* as root. The .env file in this project was kept.\""
      # NOTE: data/* must be deleted by root user
      # - "rm -r ./data/*"
