---
import Layout from "@/layouts/Default.astro"
const items = Array.from(Array(1).keys())
---

<Layout fullscreen>
	<div class="w-full h-screen flex justify-center items-center flex-wrap">
		{
			items.map(() => (
				<div
					data-light={1 + Math.floor(Math.random() * 3)}
					class="test-page-item m-8 text-black z-50 relative w-32 h-32 flex items-center justify-center">
					<p>This is a test only.</p>
				</div>
			))
		}
	</div>
	<div class="test-controls fixed z-50 top-0 right-0"></div>

	<!-- <div class="relative w-full h-screen grid place-items-center">
		<div data-light="1">
			<p>hi</p>
		</div>
	</div> -->
</Layout>

<script>
	import { Pane } from "tweakpane"

	function defineParams<T extends Record<string, unknown>>(given: T, setCb: (key: string, value: unknown) => void) {
		const proxiedParams = new Proxy(given, {
			set: (target: Record<string, unknown>, key: string, value) => {
				target[key] = value
				setCb(key, value)
				return true
			},
		})
		return proxiedParams as T
	}

	const params = defineParams(
		{
			light: 1,
			color: "#fff",
			size: 100,
			brightness: 1,
		},
		(key, value) => {
			for (const element of document.querySelectorAll<HTMLElement>(".test-page-item")) {
				element.dataset[key] = String(value)
			}
		}
	)

	const pane = new Pane({ container: document.querySelector<HTMLElement>(".test-controls") ?? undefined })
	pane.addBinding(params, "light", { min: 0, max: 10, step: 1 })
	pane.addBinding(params, "color")
	pane.addBinding(params, "size", { min: 0, max: 1000, step: 1 })
	pane.addBinding(params, "brightness", { min: 0, max: 2, step: 0.01 })

	// const mouse = document.getElementById("mouse") as HTMLElement
	// document.addEventListener("mousemove", e => {
	// 	mouse.style.left = CSS.px(e.x).toString()
	// 	mouse.style.top = CSS.px(e.y).toString()
	// })
</script>
