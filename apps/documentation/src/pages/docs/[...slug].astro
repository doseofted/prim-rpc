---
import Layout from "@/layouts/Default.astro"
import { IntroText } from "@/components/IntroText.react"
import { getCollection } from "astro:content"

interface Props {
	entry: Awaited<ReturnType<typeof getCollection<"docs">>>[number]
	tableOfContents: {
		name: string
		sections: {
			name: string
			link: string
		}[]
	}[]
}
export async function getStaticPaths() {
	const documentation = await getCollection("docs")
	const tableOfContents = documentation.map(doc => ({ ...doc.data, slug: doc.slug }))
	console.log({ tableOfContents })
	return documentation.map(entry => {
		const { slug } = entry
		return { params: { slug }, props: { entry, tableOfContents } }
	})
}
const { entry, tableOfContents: tableOfContentsNew } = Astro.props
const { Content } = await entry.render()

// NOTE: manual list probably to be replaced with Astro's generated collections
const tableOfContents = [
	{
		name: "Library Usage",
		sections: [
			{ name: "Introduction", link: "/docs/v0/usage" },
			{ name: "Get Started", link: "/docs/v0/usage/setup" },
			{ name: "How to Use", link: "/docs/v0/usage/features" },
			{ name: "Examples", link: "/docs/v0/usage/examples" },
			{ name: "Security", link: "/docs/v0/usage/security" },
			{ name: "Limitations", link: "/docs/v0/usage/limitations" },
		],
	},
	{
		name: "Reference",
		sections: [
			{ name: "Configuration", link: "/docs/v0/configuration" },
			{ name: "RPC Structure", link: "/docs/v0/structure" },
			{ name: "Additional Tools", link: "/docs/v0/tooling" },
			{ name: "Comparisons", link: "/docs/v0/comparisons" },
		],
	},
	{
		name: "Integrations",
		sections: [
			{ name: "Server Plugins", link: "/docs/v0/server-plugins" },
			{ name: "Client Plugins", link: "/docs/v0/client-plugins" },
			{ name: "IPC Plugins", link: "/docs/v0/ipc-plugins" },
			{ name: "Create Your Own", link: "/docs/v0/create-plugin" },
		],
	},
]
---

<Layout title="Documentation" className="homepage-intro">
	<!-- Side decorations -->
	<div slot="after" class="relative h-full flex flex-col">
		<div class="h-[40svh]"></div>
		<div class="flex-grow bg-white -ml-px"></div>
	</div>
	<div slot="before" class="lg:hidden relative h-full flex flex-col">
		<div class="h-[40svh]"></div>
		<div class="flex-grow bg-white -mr-px"></div>
	</div>

	<div class="flex flex-col h-full">
		<!-- Header decoration -->
		<div class="grid grid-cols-12">
			<div class="col-span-12 lg:col-span-11 h-[40svh] flex items-end justify-end">
				<div data-light="5" data-brightness="0.1,0.4" data-size="1.5,2.5" data-offset="1,2">
					<p
						transition:persist="docs-decoration"
						class="font-title text-[2.3rem] sm:text-[3rem] lg:text-[5.5rem] font-semibold text-white uppercase text-right leading-none overflow-hidden">
						<IntroText client:load text="The Docs." />
					</p>
				</div>
			</div>
		</div>

		<!-- Page content -->
		<div class="flex-grow grid grid-cols-6 lg:grid-cols-12 gap-x-4">
			<div class="bg-white/70 rounded-l-xl -ml-4 pl-4 -mr-4 pr-4 col-span-2">
				<ul
					class="menu menu-sm px-0 space-y-4 flex-nowrap py-4 sticky top-0 max-h-[100svh] overflow-auto"
					data-lenis-prevent>
					{
						tableOfContents.map(({ name, sections }, sectionIndex) => (
							<li class="space-y-2">
								<span class="menu-title !text-black px-0 font-title font-semibold">{name}</span>
								<ul class="content-section ml-0 px-0 !mt-0">
									{sections.map(({ name, link }, index) => (
										<li>
											<a class={sectionIndex === 0 && index === 0 ? "active text-white" : ""} href={link}>
												{name}
											</a>
										</li>
									))}
								</ul>
							</li>
						))
					}
				</ul>
			</div>
			<div class="bg-white -mr-4 pr-4 -ml-4 lg:ml-0 pl-4 lg:pl-0 col-span-10 grid grid-cols-10 gap-x-4 py-8">
				<div class="lg:col-start-2 col-span-12 lg:col-span-8">
					<div class="prose max-w-none">
						<Content />
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<style>
	/* Remove thin line before each section provided from DaisyUI */
	ul.content-section::before {
		content: none;
	}
</style>
