version: "3"

x-environment:
  &base_environment
  COMPOSE_ENV: $COMPOSE_ENV
  COMPOSE_HOST: $COMPOSE_HOST

x-database:
  &database
  POSTGRES_DB: "prim"
  POSTGRES_USER: "proper"
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD

services:

  # used as reverse proxy for services below
  # also, used to serve built frontend
  caddy:
    image: caddy:2.4.6-alpine
    environment:
      <<: *base_environment
      ADMIN_EMAIL: "ted@doseofted.com"
    volumes:
      - ./project/server/base.Caddyfile:/etc/caddy/base.Caddyfile:ro
      - ./data/caddy/config:/config
      - ./data/caddy/data:/data
    ports:
      - "80:80"
      - "443:443"

  # database available for use in project
  postgres:
    image: postgres:14.0-alpine
    environment:
      <<: [ *base_environment, *database ]
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  # Where API is hosted
  backend:
    build:
      context: ./project/backend
    environment:
      <<: [ *base_environment, *database ]
      # NOTE: DATABASE_HOST must match postgres service name above
      DATABASE_HOST: "postgres"
      SES_SMTP_USER: $SES_SMTP_USER
      SES_SMTP_PASS: $SES_SMTP_PASS
      SES_SMTP_HOST: $SES_SMTP_HOST
      SES_FROM_ADDR: $SES_FROM_ADDR
      SES_SMTP_PORT: "465"
      TELEGRAM_BOT_TOKEN: $TELEGRAM_BOT_TOKEN
      TELEGRAM_CHAT_ID_LIST: $TELEGRAM_CHAT_ID_LIST
    volumes:
      - ./data/backend/uploads:/home/node/project/uploads

  frontend:
    build:
      context: ./project/frontend
      # NOTE: in production, build arguments are always used
      args:
        VITE_HOST: $COMPOSE_HOST
        VITE_COMPOSE_ENV: $COMPOSE_ENV
    # no state attached, just kill it
    stop_signal: SIGKILL
    # NOTE: in development, the dev server will utilize these
    # and must be prefixed with "VITE_" as security measure
    environment:
      VITE_HOST: $COMPOSE_HOST
      VITE_COMPOSE_ENV: $COMPOSE_ENV

  #libraries:
    # TODO: once working, add service with shared volumes so libraries can be used by other containers
