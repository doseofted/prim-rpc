version: "3"

services:

# SECTION Required services
# ------------------------------------------------------------------------------
  # used as reverse proxy for services below
  # also, used to serve built frontend
  caddy:
    image: caddy:2.4.6-alpine
    environment:
      HOST: $HOST
      ADMIN_EMAIL: "ted@doseofted.com"
    volumes:
      - ./project/server/base.Caddyfile:/etc/caddy/base.Caddyfile:ro
      - ./data/caddy/config:/config
      - ./data/caddy/data:/data
    ports:
      - "80:80"
      - "443:443"

  # database available for use in project
  postgres:
    image: postgres:14.0-alpine
    environment:
      &database
      HOST: $HOST
      POSTGRES_DB: "prim"
      POSTGRES_USER: "proper"
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
# !SECTION ---------------------------------------------------------------------


# SECTION Prim
# ------------------------------------------------------------------------------
  # where API is hosted
  backend:
    depends_on:
      - libraries
    environment:
      <<: *database
      # NOTE: DATABASE_HOST must match postgres service name above
      DATABASE_HOST: "postgres"
      SES_SMTP_USER: $SES_SMTP_USER
      SES_SMTP_PASS: $SES_SMTP_PASS
      SES_SMTP_HOST: $SES_SMTP_HOST
      SES_FROM_ADDR: $SES_FROM_ADDR
      SES_SMTP_PORT: "465"
      TELEGRAM_BOT_TOKEN: $TELEGRAM_BOT_TOKEN
      TELEGRAM_CHAT_ID_LIST: $TELEGRAM_CHAT_ID_LIST
      NODE_ENV: $NODE_ENV
    # volumes:
    #   - ./data/backend/uploads:/home/node/project/backend/uploads

  frontend:
    depends_on:
      - libraries
    # no state attached, just kill it
    stop_signal: SIGKILL
    # in development, the dev server will utilize these
    # and must be prefixed with "VITE_" as security measure
    environment:
      VITE_HOST: $HOST
      NODE_ENV: $NODE_ENV

  # libraries specific to this project
  libraries:
    environment:
      HOST: $HOST
      NODE_ENV: $NODE_ENV
# !SECTION ---------------------------------------------------------------------


# SECTION Monitoring
# ------------------------------------------------------------------------------
  # Metrics from Docker (fluentd) will be forwarded to fluentbit
  fluentbit:
    image: fluent/fluent-bit:1.8
    restart: "always"
    command: "/fluent-bit/bin/fluent-bit -c /configs/config.conf"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # NOTE: path base is given by primary Compose file (project directory)
      - ./misc/fluentbit.conf:/configs/config.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    environment:
      HOST: $HOST
      METRICS_COLLECTION_HOST: $METRICS_COLLECTION_HOST
    profiles:
      - "monitoring"

  # Metrics to be pulled by Prometheus
  nodeexporter:
    image: prom/node-exporter:v1.3.1
    restart: "always"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    profiles:
      - "monitoring"
# !SECTION ---------------------------------------------------------------------
