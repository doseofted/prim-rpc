---
import { Icon } from "astro-icon/components"
import defu from "defu"
interface Props {
	type?: "slot" | "text" | "boolean" | "link"
	keyName: string
	value?: string | string[] | boolean | number | { name: string; href: string }[]
	name?: string
	mappings?: Record<"truthy" | "falsey", string>
	horizontal?: boolean
}
const { keyName: keyName, value, type, name, mappings: mappingsGiven, horizontal = false } = Astro.props
const mappings = defu(mappingsGiven, {
	truthy: "Yes",
	falsey: "No",
	link: " Link",
})
const valueAsArray = Array.isArray(value) ? value : [value]
---

<li class:list={["flex gap-2 text-sm", horizontal ? "flex-row items-center" : "flex-col"]}>
	<div class="capitalize font-semibold">{keyName}:</div>
	{
		type === "text" ? (
			<div>{value}</div>
		) : type === "boolean" ? (
			<div class="flex gap-1 items-center">
				<Icon
					name={typeof value === "boolean" ? (value ? "ph:check-circle-bold" : "ph:x-circle-bold") : value}
					class:list={["w-5 h-5", typeof value === "boolean" ? (value ? "text-gray-700" : "text-gray-700") : ""]}
				/>
				<span>{mappings[value ? "truthy" : "falsey"]}</span>
			</div>
		) : type === "link" ? (
			<div>
				{valueAsArray.map((value, index, { length }) => (
					<>
						<a
							class="hover:underline"
							href={typeof value === "object" ? value.href : undefined}
							target={typeof value === "object" ? (value.href.startsWith("http") ? "_blank" : undefined) : undefined}>
							<span>{typeof value === "object" ? value.name : name}</span>
							{typeof value === "object" && value.href.startsWith("http") && (
								<Icon name="ph:arrow-square-out-bold" class:list="ml-0.5 w-3 h-3 inline-block relative -top-[1px]" />
							)}
						</a>
						{index < length - 1 && ", "}
					</>
				))}
			</div>
		) : (
			<div>
				<slot />
			</div>
		)
	}
</li>
